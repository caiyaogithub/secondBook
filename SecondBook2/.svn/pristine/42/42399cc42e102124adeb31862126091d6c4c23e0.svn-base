package com.hautbook.register.Action;


import javax.servlet.ServletContext;
import javax.servlet.http.HttpSessionAttributeListener;
import javax.servlet.http.HttpSessionBindingEvent;
import javax.servlet.http.HttpSessionEvent;
import javax.servlet.http.HttpSessionListener;

import org.apache.log4j.Logger;

/**
 * 
 * @author caiyao
 *
 * @function session监听器
 *
 */
public class SessionListener implements HttpSessionAttributeListener , HttpSessionListener{
	@Override
	public void attributeAdded(HttpSessionBindingEvent addEvent) {
		if(!addEvent.getName().equals("captchaString")){
			ServletContext application= addEvent.getSession().getServletContext() ;
			application.setAttribute(addEvent.getValue().toString(),"login") ;
			(Logger.getLogger(this.getClass().getName())).info("成功将登陆信息添加到application中！") ;
		}
	}

	@Override
	public void attributeRemoved(HttpSessionBindingEvent removeEvent) {
		if(!removeEvent.getName().equals("captchaString")){
			ServletContext application= removeEvent.getSession().getServletContext() ;
			application.removeAttribute(removeEvent.getValue().toString()) ;
			(Logger.getLogger(this.getClass().getName())).info("成功将该用户从application中移除！");
		}
	}

	@Override
	public void attributeReplaced(HttpSessionBindingEvent replaceEvent) {
		if(!replaceEvent.getName().equals("captchaString")){
			ServletContext application= replaceEvent.getSession().getServletContext() ;
			application.setAttribute(replaceEvent.getValue().toString(),"login") ;
			(Logger.getLogger(this.getClass().getName())).info("替换application中的值！");
		}
	}

	@Override
	public void sessionCreated(HttpSessionEvent createEvent) {
		/***
		 * session 创建时不做任何操作
		 */
		(Logger.getLogger(this.getClass().getName())).info("session 成功创建！");
	}

	@Override
	public void sessionDestroyed(HttpSessionEvent destroyEvent) {
		ServletContext application= destroyEvent.getSession().getServletContext() ;	
		Object userName = destroyEvent.getSession().getAttribute("userName") ;
		/**
		 * 判断session中是否有以userName为键的值：
		 * 如果有表示用户在session生命周期到达之前没有执行下线操作
		 * 如果没有表示在session生命周期到达之前用户执行了下线操作
		 * 
		 * */
		if(userName != null){
			application.removeAttribute(userName.toString()) ;
			(Logger.getLogger(this.getClass().getName()))
			.info("session 消亡，成功注销掉该session中的" + destroyEvent.getSession().getAttribute("userName").toString());
		}else{
			(Logger.getLogger(this.getClass().getName()))
			.info("该用户已经下线，没有执行application对象的remove方法！");
		}
		
	}
}
